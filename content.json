{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Swagger","slug":"Swagger","date":"2021-11-06T16:00:00.000Z","updated":"2021-11-15T15:11:18.819Z","comments":true,"path":"2021/11/07/Swagger/","link":"","permalink":"http://example.com/2021/11/07/Swagger/","excerpt":"","text":"Swagger学习目标： 了解Swagger的作用和盖帘 了解前后端分离 在SpringBoot中国集成Swagger Swagger前后端分离 Vue + SpringBoot 后端时代：前端只用管理静态页面；html&gt;后端。模板引擎Jsp&gt;后端是主力 前后端分离时代： 后端：后端控制层(Controller)，服务层(Service)，数据访问层(DAO)【后端团队】 前端：前端控制层，视图层【前端团队】 伪造后端数据，json。已经存在了，不需要后端接口，前端工程依旧能够跑起来 前后端如何交互？===&gt;API 前后端相互独立，松耦合； 前后端甚至可以部署在不同的服务器上； 产生一个问题： 前后端集成联调，前端人员和后端人员无法做到“及时协商，尽早解决”，最终导致问题集中爆发； 解决方案： 首先指定schema【计划的提纲】，实时更新最新API,降低集成的风险； 在Swagger之前：通过制定word计划API文档 前后端分离： 测试后端接口：postman 后端提供接口，需要实时更新最新的消息及需求改动！ 哪里有需求哪里就有市场，于是Swagger就应运而生了 Swagger 号称世界上最流行的Api框架 RestFul API 文档在线自动生成工具==&gt;Api文档与Api定义同步更新 直接运行，可以在线测试API接口 支持多种语言：（Java，Php） 官网：https://swagger.io/ SpringBoot集成Swagger 新建一个SpringBoot，web项目 导入相关依赖，在项目使用Swagger需要依赖jar包 Springbox(Swagger3) 123456&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt; 编写一个Hello工程 Application上面加入@EnableOpenApi注解 配置Swagger==&gt; Config Swagger3的访问路径由port/swagger-ui.html改成了port/swagger-ui/ 或port/swagger-ui/index.html 12345678910111213141516171819202122232425@Configuration//声明配置类@EnableOpenApi//开启swagger3public class SwaggerConfig &#123; //配置Swagger的Docket的bean实例 @Bean public Docket docket()&#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()); &#125; //配置swagger信息=apiinfo private ApiInfo apiInfo() &#123; //作者信息 Contact contact = new Contact(&quot;AYAN&quot;,&quot;https://dayanhan.github.io/&quot;,&quot;1738340585@qq.com&quot;); return new ApiInfo( &quot;AYAN的SwaggerAPI文档&quot;, &quot;不成功便成仁&quot;, &quot;v1.0&quot;, &quot;https://dayanhan.github.io/&quot;, contact, &quot;Apache 2.0&quot;, &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;, new ArrayList() ); &#125;&#125; swagger配置扫描接口Docket.select () .enable(true)//enable是否启动Swagger，如果为false，则Swagger不能在浏览器中访问 123456789101112131415161718192021@Configuration//声明配置类@EnableOpenApi//开启swagger3public class SwaggerConfig &#123; //配置Swagger的Docket的bean实例 @Bean public Docket docket()&#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .enable(true)//enable是否启动Swagger，如果为false，则Swagger不能在浏览器中访问 .select() //RequestHandlerSelectors,配置要扫描接口的方式 //basePackage，指定要扫描的包 //any()，扫描全部 //none(),不扫描 //withClassAnnotation，扫描类上的注解，参数是一个注解类的反射对象 //withMethodAnnotation，扫描方法上的注解 .apis(RequestHandlerSelectors.basePackage(&quot;com.ayan.swagger.controller&quot;)) //path(),过滤什么路径,ant(&quot;&quot;),过滤指定路径就扫描不到了 //.paths(PathSelectors.ant(&quot;/ayan/**&quot;)) .build(); &#125; 配置API文档分组1.groupName(&quot;阿焱&quot;) 如何配置多个分组；多个Docket 实例即可，但是不要重名！ 123456789101112@Bean public Docket docket1()&#123; return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;); &#125; @Bean public Docket docket2()&#123; return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;B&quot;); &#125; @Bean public Docket docket3()&#123; return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;C&quot;); &#125; 实体类配置 123456789101112package com.ayan.swagger.pojo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;//@Api(注释)@ApiModel(&quot;用户实体类&quot;)public class User &#123; @ApiModelProperty(&quot;用户名&quot;) public String username; @ApiModelProperty(&quot;密码&quot;) public String password;&#125; controller配置 12345678910111213141516171819202122232425262728293031323334package com.ayan.swagger.controller;import com.ayan.swagger.pojo.User;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.web.bind.annotation.*;@Api(tags = &quot;Hello控制器类&quot;)@RestController@RequestMapping(value = &quot;/hello&quot;)public class HelloController &#123; @GetMapping(value = &quot;/hello&quot;) public String hello()&#123; return &quot;hello world!&quot;; &#125; //只要我们的接口中，返回值中存在实体类，他就会被扫描到swagger中 @PostMapping(value = &quot;/user&quot;) public User user()&#123; return new User(); &#125; //Operation接口,不是放在类上的，是方法 @ApiOperation(&quot;Hello2方法&quot;) @GetMapping(value = &quot;/hello2&quot;) public String hello2(@ApiParam(&quot;用户名&quot;) String username)&#123; return &quot;hello&quot;+username; &#125; //Operation接口,不是放在类上的，是方法 @ApiOperation(&quot;post提交用户测试方法&quot;) @PostMapping(value = &quot;/postuser&quot;) public User postuser(@ApiParam(&quot;用户信息&quot;) @RequestBody User user)&#123; return user; &#125;&#125; 总结： 我们可以通过Swagger给一些比较难理解的属性或者接口，增加注释信息 接口文档实时更新 可以在线测试 Swagger是一个优秀的工具，几乎所有大公司都有使用它 【注意点】在正式发布的时候，关闭Swagger！！！出于安全考虑。而且节省运行的内存；","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2021-11-06T10:26:47.000Z","updated":"2021-11-15T15:17:56.402Z","comments":true,"path":"2021/11/06/我的第一篇博客文章/","link":"","permalink":"http://example.com/2021/11/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"第一章java基础篇章内容1 第二章内容2参考文献内容3","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-11-06T10:18:02.882Z","updated":"2021-11-06T10:18:02.882Z","comments":true,"path":"2021/11/06/hello-world/","link":"","permalink":"http://example.com/2021/11/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}